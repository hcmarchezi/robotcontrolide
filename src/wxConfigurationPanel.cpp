// -*- C++ -*- generated by wxGlade 0.4.1 on Fri Dec 01 10:44:25 2006

#include "wxConfigurationPanel.h"


wxConfigurationPanel::wxConfigurationPanel(wxWindow* parent, int id, ConfigurationFile* configurationFile):
    wxPanel(parent, id)
{
    // begin wxGlade: wxConfigurationPanel::wxConfigurationPanel
    lbPortNumber = new wxStaticText(this, -1, wxT("Port Number"));
    txtPortNumber = new wxTextCtrl(this, -1);
    lbServerDriver = new wxStaticText(this, -1, wxT("Server Driver"));
    gridServerDriver = new wxGrid(this, -1);
    btEditServerDriver = new wxButton(this, id+1, wxT("Edit Simulation Driver"));
    lbModelDriver = new wxStaticText(this, -1, wxT("Models' Drivers"));
    gridModelDriver = new wxGrid(this, -1);
    btAddModelDriver = new wxButton(this, id+2, wxT("Add Model Driver"));
    btEditModelDriver = new wxButton(this, id+3, wxT("Edit Model Driver"));
    btRemoveModelDriver = new wxButton(this, id+4, wxT("Remove Model Driver"));

    set_properties();
    do_layout();
    // end wxGlade

    btEditServerDriver->Enable(true);

    // Armazeza o arquivo de configuracao e atualiza os dados na janela
    this->configurationFile = configurationFile;

    // Adiciona uma linha no grid de configuracao da simulacao
    this->gridServerDriver->AppendRows();

    // Atribui os dados da configuracao servidora    
    if ( this->configurationFile->GetSimulationConfiguration() != NULL )
    {
      this->gridServerDriver->SetCellValue(0,0,wxString( this->configurationFile->GetSimulationConfiguration()->GetName().c_str() ) );
      this->gridServerDriver->SetReadOnly(0,0);
      this->gridServerDriver->SetCellValue(0,1,wxString( this->configurationFile->GetSimulationConfiguration()->GetDevice().c_str() ) );
      this->gridServerDriver->SetReadOnly(0,1);
      this->gridServerDriver->SetCellValue(0,2,wxString( this->configurationFile->GetSimulationConfiguration()->GetPlugIn().c_str() ) );
      this->gridServerDriver->SetReadOnly(0,2);
      this->gridServerDriver->SetCellValue(0,3,wxString( this->configurationFile->GetSimulationConfiguration()->GetServerID().c_str() ) );
      this->gridServerDriver->SetReadOnly(0,3);
    }
    else
    {
      this->gridServerDriver->SetCellValue(0,0,wxString("") );
      this->gridServerDriver->SetCellValue(0,1,wxString("") );
      this->gridServerDriver->SetCellValue(0,2,wxString("") );
      this->gridServerDriver->SetCellValue(0,3,wxString("") );
    }

    // Atribui os dados das configuracoes dos modelos
    for(int i=0; i < this->configurationFile->GetPlayerConfigurations().size(); i++)
    {
      this->gridModelDriver->AppendRows();      
      this->gridModelDriver->SetCellValue(i,0,wxString( this->configurationFile->GetPlayerConfigurations()[i]->GetDriverName().c_str() ) );
      this->gridModelDriver->SetReadOnly(i,0);
      this->gridModelDriver->SetCellValue(i,1,wxString( this->configurationFile->GetPlayerConfigurations()[i]->GetDeviceName().c_str() ) );
      this->gridModelDriver->SetReadOnly(i,1);
      this->gridModelDriver->SetCellValue(i,2,wxString( this->configurationFile->GetPlayerConfigurations()[i]->GetModel()->GetId() ) );
      this->gridModelDriver->SetReadOnly(i,2);
    }

    // Atribui o numero da porta
    this->txtPortNumber->SetValue( wxString( this->configurationFile->GetPortNumber().c_str() ) );
}


void wxConfigurationPanel::set_properties()
{
    // begin wxGlade: wxConfigurationPanel::set_properties
    lbPortNumber->SetFont(wxFont(10, wxDEFAULT, wxNORMAL, wxBOLD, 0, wxT(""))); 
    lbServerDriver->SetFont(wxFont(10, wxDEFAULT, wxNORMAL, wxBOLD, 0, wxT("")));
    gridServerDriver->CreateGrid(0, 4);
    gridServerDriver->SetColLabelValue(0, wxT("Name"));
    gridServerDriver->SetColumnWidth(0,150);
    gridServerDriver->SetColLabelValue(1, wxT("Provides"));
    gridServerDriver->SetColumnWidth(1,150);
    gridServerDriver->SetColLabelValue(2, wxT("PlugIn"));
    gridServerDriver->SetColumnWidth(2,150);
    gridServerDriver->SetColLabelValue(3, wxT("Server_ID"));
    gridServerDriver->SetColumnWidth(3,150);
    lbModelDriver->SetFont(wxFont(10, wxDEFAULT, wxNORMAL, wxBOLD, 0, wxT("")));
    gridModelDriver->CreateGrid(0, 3);
    gridModelDriver->SetColLabelValue(0, wxT("Name"));
    gridModelDriver->SetColumnWidth(0,150);
    gridModelDriver->SetColLabelValue(1, wxT("Provides"));
    gridModelDriver->SetColumnWidth(1,150);
    gridModelDriver->SetColLabelValue(2, wxT("Gz_Id"));
    gridModelDriver->SetColumnWidth(2,200);
    gridModelDriver->SetSize(wxSize(515, 250));
    // end wxGlade    
//    gridModelDriver->SetSelectionMode(wxGrid::wxGridSelectionModes::wxGridSelectCells);
    gridModelDriver->SetSelectionMode(wxGrid::wxGridSelectCells);
}


void wxConfigurationPanel::do_layout()
{
    // begin wxGlade: wxConfigurationPanel::do_layout
    wxBoxSizer* sizerMain = new wxBoxSizer(wxVERTICAL);
    //wxBoxSizer* sizerPortNumber = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizerModelDriverButtons = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizerServerConfigButtons = new wxBoxSizer(wxHORIZONTAL);

    //sizerMain->Add(sizerPortNumber, 0, wxEXPAND, 0);
    sizerMain->Add(lbPortNumber, 0, wxADJUST_MINSIZE, 0);
    sizerMain->Add(txtPortNumber, 0, wxEXPAND, 0);
    sizerMain->Add(lbServerDriver, 0, wxADJUST_MINSIZE, 0);
    sizerMain->Add(gridServerDriver, 1, wxEXPAND, 0);
    sizerMain->Add(sizerServerConfigButtons, 1, wxEXPAND, 0);
    sizerMain->Add(lbModelDriver, 0, wxADJUST_MINSIZE, 0);
    sizerMain->Add(gridModelDriver, 1, wxEXPAND|wxALIGN_CENTER_HORIZONTAL, 0);

    //sizerPortNumber->Add(lbPortNumber, 0, wxADJUST_MINSIZE, 0);
    //sizerPortNumber->Add(txtPortNumber, 0, wxEXPAND, 0);

    sizerServerConfigButtons->Add(btEditServerDriver, 0, wxADJUST_MINSIZE, 0);

    sizerModelDriverButtons->Add(btAddModelDriver, 0, wxADJUST_MINSIZE, 0);
    sizerModelDriverButtons->Add(btEditModelDriver, 0, wxADJUST_MINSIZE, 0);
    sizerModelDriverButtons->Add(btRemoveModelDriver, 0, wxADJUST_MINSIZE, 0);

    sizerMain->Add(sizerModelDriverButtons, 1, wxEXPAND, 0);

    SetAutoLayout(true);
    SetSizer(sizerMain);
    sizerMain->Fit(this);
    sizerMain->SetSizeHints(this);
    // end wxGlade
}

ConfigurationFile * wxConfigurationPanel::GetConfigurationFile()
{
  return this->configurationFile;
}



