// -*- C++ -*- generated by wxGlade 0.4.1 on Fri Jul 28 11:46:36 2006

#include "wxIRCEMainWindow.h"

#include "SystemException.h"
#include "wx3DModelPanel.h"
#include "wxClientControlPanel.h"


wxIRCEMainWindow::wxIRCEMainWindow(wxWindow* parent, int id, const wxString& title, const wxPoint& pos, const wxSize& size, long style):
    wxFrame(parent, id, title, pos, size, wxDEFAULT_FRAME_STYLE)
{
    // begin wxGlade: wxIRCEMainWindow::wxIRCEMainWindow
    mainSplitter = new wxSplitterWindow(this, -1, wxDefaultPosition, wxDefaultSize, wxSP_3D|wxSP_BORDER);
    rightSplitterPanel = new wxPanel(mainSplitter, -1);
    tabConfiguration = new wxNotebook(rightSplitterPanel, -1, wxDefaultPosition, wxDefaultSize, wxNB_BOTTOM);
    //tabitemModels = new wxPanel(tabConfiguration, -1);
    tabitemProject = new wxPanel(tabConfiguration, -1);
    tabitemProperties = new wxPanel(tabConfiguration, -1);
    leftSplitterPanel = new wxPanel(mainSplitter, -1);
    tabModel = new wxNotebook(leftSplitterPanel, -1, wxDefaultPosition, wxDefaultSize, 0);
    //tabitemClientControl = new wxPanel(tabModel, -1);
    //tabitemWorld = new wxPanel(tabModel, -1);
    //txtClientControl = new wxTextCtrl(tabitemClientControl, -1, wxT(""), wxDefaultPosition, wxDefaultSize, wxHSCROLL | wxVSCROLL | wxTE_MULTILINE | wxWANTS_CHARS | wxTE_PROCESS_TAB ); //|wxTE_RICH|wxTE_RICH2|wxTE_AUTO_URL|wxVSCROLL|wxHSCROLL|wxWANTS_CHARS);
    //
    //txtClientControl->SetSize(wxDefaultSize.GetWidth(),430);
    //
    //btCompile = new wxButton(tabitemClientControl, -1, wxT("Compile"));
    //btRunSimulation = new wxButton(tabitemClientControl, -1, wxT("Simulate"));
    //btRunControl = new wxButton(tabitemClientControl, -1, wxT("Send Control"));
    //txtOutput = new wxTextCtrl(tabitemClientControl, -1, wxT(""), wxDefaultPosition, wxDefaultSize, wxTE_MULTILINE|wxTE_READONLY);
    //
    //txtOutput->SetSize(wxDefaultSize.GetWidth(),150);
    
    //tabitemConfiguration = new wxPanel(tabModel, -1);
    treectrlItems = new wxTreeCtrl(tabitemProject, -1, wxDefaultPosition, wxDefaultSize, wxTR_HAS_BUTTONS|wxTR_LINES_AT_ROOT|wxTR_DEFAULT_STYLE|wxSUNKEN_BORDER);
    //lstbxModels = new wxListCtrl(tabitemModels, -1, wxDefaultPosition, wxDefaultSize, wxLC_REPORT|wxSUNKEN_BORDER);

    set_properties();
    do_layout();
    // end wxGlade    
}


void wxIRCEMainWindow::set_properties()
{
    // begin wxGlade: wxIRCEMainWindow::set_properties
    SetTitle(wxT("IRCE - Integrated Robot Control Environment - Version 0.1"));
    SetSize(wxSize(750, 676));
    // end wxGlade
}


void wxIRCEMainWindow::do_layout()
{
    // begin wxGlade: wxIRCEMainWindow::do_layout
    mainSizer = new wxBoxSizer(wxHORIZONTAL);
    sizerRight = new wxBoxSizer(wxHORIZONTAL);
    sizerModels = new wxBoxSizer(wxHORIZONTAL);
    sizerItems = new wxBoxSizer(wxHORIZONTAL);
    sizerProperties = new wxGridSizer(20, 2, 0, 0);
    sizerLeft = new wxBoxSizer(wxHORIZONTAL);
    //sizerClientControl = new wxBoxSizer(wxVERTICAL);
    //sizerClientControlButtons = new wxBoxSizer(wxHORIZONTAL);
    //sizerClientControl->Add(txtClientControl, 0, wxEXPAND, 0);
    //sizerClientControlButtons->Add(btCompile, 0, wxALIGN_CENTER_HORIZONTAL|wxADJUST_MINSIZE, 0);
    //sizerClientControlButtons->Add(btRunSimulation, 0, wxALIGN_CENTER_HORIZONTAL|wxADJUST_MINSIZE, 0);
    //sizerClientControlButtons->Add(btRunControl, 0, wxALIGN_CENTER_HORIZONTAL|wxADJUST_MINSIZE, 0);
    //sizerClientControl->Add(sizerClientControlButtons, 1, wxADJUST_MINSIZE, 0);
    //sizerClientControl->Add(txtOutput, 0, wxEXPAND, 0);
    //tabitemClientControl->SetAutoLayout(true);
    //tabitemClientControl->SetSizer(sizerClientControl);
    //sizerClientControl->Fit(tabitemClientControl);
    //sizerClientControl->SetSizeHints(tabitemClientControl);
    //tabModel->AddPage(tabitemWorld, wxT("Virtual World"));
    //tabModel->AddPage(tabitemClientControl, wxT("Client Control"));
    //tabModel->AddPage(tabitemConfiguration, wxT("Configuration"));
    sizerLeft->Add(new wxNotebookSizer(tabModel), 1, wxEXPAND, 0);
    leftSplitterPanel->SetAutoLayout(true);
    leftSplitterPanel->SetSizer(sizerLeft);
    sizerLeft->Fit(leftSplitterPanel);
    sizerLeft->SetSizeHints(leftSplitterPanel);
    tabitemProperties->SetAutoLayout(true);
    tabitemProperties->SetSizer(sizerProperties);
    sizerProperties->Fit(tabitemProperties);
    sizerProperties->SetSizeHints(tabitemProperties);
    sizerItems->Add(treectrlItems, 1, wxEXPAND, 0);
    tabitemProject->SetAutoLayout(true);
    tabitemProject->SetSizer(sizerItems);
    sizerItems->Fit(tabitemProject);
    sizerItems->SetSizeHints(tabitemProject);
    //sizerModels->Add(lstbxModels, 1, wxALL|wxEXPAND, 1);
    //tabitemModels->SetAutoLayout(true);
    //tabitemModels->SetSizer(sizerModels);
    //sizerModels->Fit(tabitemModels);
    //sizerModels->SetSizeHints(tabitemModels);
    tabConfiguration->AddPage(tabitemProperties, wxT("Properties"));
    tabConfiguration->AddPage(tabitemProject, wxT("Items"));
    //tabConfiguration->AddPage(tabitemModels, wxT("Models"));
    sizerRight->Add(new wxNotebookSizer(tabConfiguration), 1, wxEXPAND, 0);
    rightSplitterPanel->SetAutoLayout(true);
    rightSplitterPanel->SetSizer(sizerRight);
    sizerRight->Fit(rightSplitterPanel);
    sizerRight->SetSizeHints(rightSplitterPanel);
    mainSplitter->SplitVertically(leftSplitterPanel, rightSplitterPanel);
    mainSizer->Add(mainSplitter, 1, wxEXPAND, 0);
    SetAutoLayout(true);
    SetSizer(mainSizer);
    Layout();
    // end wxGlade 
}

void wxIRCEMainWindow::SetProject(IRCEProject* project)
{
  // Insere o projeto na arqvore de arquivos
  if (! this->projectId.IsOk() )
  {
    this->projectId = this->treectrlItems->AddRoot( wxFileNameFromPath( wxString( project->GetProjectFile().c_str() ) ) );
  }
  else
  {
    this->treectrlItems->SetItemText( this->projectId, wxFileNameFromPath( wxString( project->GetProjectFile().c_str() ) ) );
  }
  // Insere o mundo virtual
  this->SetVirtualWorld( wxString( project->GetVirtualWorld()->GetWorldFile().c_str() ) );
  // Adiciona os programas de controle
  for (unsigned int i=0; i < project->GetPlayerControlPrograms().size(); i++)
  {
    this->AddControlProgram( project->GetPlayerControlPrograms()[i] );
  }
  // Adiciona os arquivos de configuracao
  for (unsigned int i=0; i < project->GetConfigurationFiles().size(); i++)
  {
    this->AddConfigurationFile( project->GetConfigurationFiles()[i] );
  }
}

void wxIRCEMainWindow::SetVirtualWorld( wxString strWorld )
{
  // Verifica se o item do proejto existe
  if ( ! this->projectId.IsOk() )
  {
    throw new SystemException("Nao foi criado o projeto na arvore da janela","wxIRCEMainWindow::SetVirtualWorld");
  }

  // Cria o item do arquivo de mundo virtual na arvore de arquivos
  if ( ! this->virtualWorldId.IsOk() )
  {
    this->virtualWorldId = this->treectrlItems->AppendItem( this->projectId, wxFileNameFromPath(strWorld) );
  }
  else
  {
    this->treectrlItems->SetItemText( this->virtualWorldId, wxFileNameFromPath(strWorld) );
  }
}

void wxIRCEMainWindow::AddControlProgram(PlayerControl* program)
{ 
  if ( ! this->projectId.IsOk() )
  {
    throw new SystemException("Nao foi criado o projeto na arvore da janela","wxIRCEMainWindow::AddControlProgram");
  }

  wxString strControlProgramFileName = wxFileNameFromPath( wxString( program->GetClientControlFile().c_str() ) );

  for (int index=0; index < this->lstControlProgram.size(); index++)
  {
    if ( this->lstControlProgram[index] == program )
    {     
      this->treectrlItems->SetItemText(this->lstControlProgramsId[index],strControlProgramFileName);
    }
  }

  this->lstControlProgram.push_back( program );
  this->lstControlProgramsId.push_back( this->treectrlItems->AppendItem( this->projectId, strControlProgramFileName ) ); 
}

void wxIRCEMainWindow::RemoveControlProgram(PlayerControl* program)
{
  if ( ! this->projectId.IsOk() )
  {
    throw new SystemException("Nao foi criado o projeto na arvore da janela","wxIRCEMainWindow::SetVirtualWorld");
  }

  wxString strControlProgramFileName = wxString( program->GetClientControlFile().c_str() );

  for (int index=0; index < this->lstControlProgram.size(); index++)
  {
    if ( this->lstControlProgram[index] == program )
    {     
      this->treectrlItems->SetItemText(this->lstControlProgramsId[index],strControlProgramFileName);
    }
  }

  throw new SystemException("Programa de Controle não esta representado na janela","wxIRCEMainWindow::RemoveControlProgram");

}

void wxIRCEMainWindow::AddConfigurationFile(ConfigurationFile* configuration)
{
  if ( ! this->projectId.IsOk() )
  {
    throw new SystemException("Nao foi criado o projeto na arvore da janela","wxIRCEMainWindow::AddConfigurationFile");  
  }

  wxString strConfigurationFileName = wxFileNameFromPath( wxString( configuration->GetConfigurationFile().c_str() ) );

  for (int index=0; index < this->lstConfigurationFiles.size(); index++)
  {
    if ( this->lstConfigurationFiles[index] == configuration )
    {     
      this->treectrlItems->SetItemText(this->lstConfigurationFilesId[index],strConfigurationFileName);
    }
  }

  this->lstConfigurationFiles.push_back( configuration );
  this->lstConfigurationFilesId.push_back( this->treectrlItems->AppendItem( this->projectId, strConfigurationFileName ) ); 
}
void wxIRCEMainWindow::RemoveConfigurationFile(ConfigurationFile * configuration)
{
  if ( ! this->projectId.IsOk() )
  {
    throw new SystemException("Nao foi criado o projeto na arvore da janela","wxIRCEMainWindow::RemoveConfigurationFile");
  }

  wxString strConfigurationFileName = wxString( configuration->GetConfigurationFile().c_str() );

  for (int index=0; index < this->lstConfigurationFiles.size(); index++)
  {
    if ( this->lstConfigurationFiles[index] == configuration )
    {     
      this->treectrlItems->SetItemText(this->lstConfigurationFilesId[index],strConfigurationFileName);
    }
  }

  throw new SystemException("Arquivo de configuracao não esta representado na janela","wxIRCEMainWindow::RemoveConfigurationFile");

}

int wxIRCEMainWindow::GetNotebookPage(wxTreeItemId id)
{
  // Procura e retorna o wx3DModelPanel ( só deve haver um )
  if ( this->virtualWorldId == id )
  {    
    for ( int i=0; i < this->tabModel->GetPageCount(); i++)
    {
      wxNotebookPage * panel = this->tabModel->GetPage(i);
      if (dynamic_cast<wx3DModelPanel*>(panel))
      {
        return i;
      }
      else
      {
        return -1;
      }
    }
  }
  // Senao o id tem que se de um dos tabs do programa de controle
  else
  {
    // Procura e retorna o wxClientControlProgram
    for (int i=0; i < this->tabModel->GetPageCount(); i++)
    {
      wxNotebookPage * panel = this->tabModel->GetPage(i);
      // Se o panel for do tipo wxClientControlPanel verificar o nome do programa de controle
      if (dynamic_cast<wxClientControlPanel*>(panel))
      {
        wxClientControlPanel * clientControlPanel = (wxClientControlPanel*)panel;
        // nome do arquivo do programa de controle no painel
        wxString strPanelControlProgramFile = wxFileNameFromPath( wxString( clientControlPanel->GetPlayerControl()->GetClientControlFile().c_str() ) );
        // nome do item selecionado na arvores de itens
        wxString strItemControlProgramFile = this->treectrlItems->GetItemText(id);

        // Se o nome do programa de controle for o mesmo, retorna o wxPanel correspondente
        if ( strPanelControlProgramFile == strItemControlProgramFile )
        {
          return i;
        }        
      }
    }
  }
  return -1;
}

wxTreeItemId wxIRCEMainWindow::GetVirtualWorldId()
{
  return this->virtualWorldId;
}
wxTreeItemId wxIRCEMainWindow::GetConfigurationId()
{
  return this->configurationId;
}
wxTreeItemId wxIRCEMainWindow::GetProjectId()
{
  return this->projectId;
}

wx3DModelPanel * wxIRCEMainWindow::Get3DModelPanel()
{
  for (int i=0; i < this->tabModel->GetPageCount(); i++)
  {
    wxNotebookPage * page = this->tabModel->GetPage(i);
    if ( dynamic_cast<wx3DModelPanel*>(page) )
    {
      return (wx3DModelPanel*)page;
    }
  }
  throw new SystemException("Janela principal nao possui painel de modelos 3D","wxIRCEMainWindow::Get3DModelPanel");
}

wxConfigurationPanel * wxIRCEMainWindow::GetCurrentConfigurationPanel()
{
  // Obtem o painel selecionado ( page )
  wxNotebookPage * page = this->tabModel->GetPage( this->tabModel->GetSelection() );
  // Se certifica que o painel selecionado é de programa de controle
  if (! dynamic_cast<wxConfigurationPanel*>(page) )
  {
    throw new SystemException("wxIRCEMainWindow::GetCurrentConfigurationPanel","Painel selecionado não é para Arquivo de Configuracao");
  }
  // Faz o casting e Obtem o program de controle associado
  return (wxConfigurationPanel*)page;
}
 
wxClientControlPanel * wxIRCEMainWindow::GetCurrentClientControlPanel()
{
  // Obtem o painel selecionado ( page )
  wxNotebookPage * page = this->tabModel->GetPage( this->tabModel->GetSelection() );
  // Se certifica que o painel selecionado é de programa de controle
  if (! dynamic_cast<wxClientControlPanel*>(page) )
  {
    throw new SystemException("wxIRCEMainWindow::GetCurrentConfigurationPanel","Painel selecionado não é para Arquivo de Configuracao");
  }
  // Faz o casting e Obtem o program de controle associado
  return (wxClientControlPanel*)page;
}