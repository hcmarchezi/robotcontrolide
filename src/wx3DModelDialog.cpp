// -*- C++ -*- generated by wxGlade 0.4.1 on Sat Sep 23 10:12:34 2006

#include "wx3DModelDialog.h"

#include "Conversion.h"
//#include "ModelFactory.h"
#include "ModelUtility.h"

wx3DModelDialog::wx3DModelDialog(wxWindow* parent, int id, const wxString& title, const wxPoint& pos, const wxSize& size, long style):
    wxDialog(parent, id, title, pos, size, wxDEFAULT_DIALOG_STYLE)
{
    // begin wxGlade: wx3DModelDialog::wx3DModelDialog
    lb3DModelType = new wxStaticText(this, -1, wxT("3D Model"));
    //const wxString cmbbx3DModelType_choices[] = { };
    cmbbx3DModelType = new wxComboBox(this, -1, wxT(""), wxDefaultPosition, wxDefaultSize, 0, NULL, wxCB_DROPDOWN);

    lb3DModelID = new wxStaticText(this, -1, wxT("ID") );
    txt3DModelID = new wxTextCtrl(this, -1, wxT("") ); 

    lbPositionX = new wxStaticText(this, -1, wxT("Position X"));
    txtPositionX = new wxTextCtrl(this, -1, wxT(""));
    lbPositionY = new wxStaticText(this, -1, wxT("Position Y"));
    txtPositionY = new wxTextCtrl(this, -1, wxT(""));
    lbPositionZ = new wxStaticText(this, -1, wxT("Position Z"));
    txtPositionZ = new wxTextCtrl(this, -1, wxT(""));
    btAdd = new wxButton(this, id+1, wxT("Add"));
    btCancel = new wxButton(this, id+2, wxT("Cancel"));

    set_properties();
    do_layout();
    // end wxGlade
    //vector<string> arrStrModelType = ModelFactory::GetModelTypeNames();
    vector<string> arrStrModelType = ModelUtility::GetModelTypeNames();
    for (int index = 0; index < arrStrModelType.size(); index++)
    {
      this->cmbbx3DModelType->Append(wxString( arrStrModelType[index].c_str() ));
    }

    this->bButtonAddPressed = false;

    // Ligacao de eventos
    wxEvtHandler::Connect(id+1,wxEVT_COMMAND_BUTTON_CLICKED,
                  (wxObjectEventFunction) (wxEventFunction) (wxCommandEventFunction)
                  &wx3DModelDialog::On_BtAdd_Clicked );
    wxEvtHandler::Connect(id+2,wxEVT_COMMAND_BUTTON_CLICKED,
                  (wxObjectEventFunction) (wxEventFunction) (wxCommandEventFunction)
                  &wx3DModelDialog::On_BtCancel_Clicked );    
}


void wx3DModelDialog::set_properties()
{
    // begin wxGlade: wx3DModelDialog::set_properties
    SetTitle(wxT("Select 3D Model and Position"));
    SetSize(wxSize(280, 160));
    lb3DModelType->SetSize(wxSize(64, 13));
    cmbbx3DModelType->SetSize(wxSize(180, 21));

    lb3DModelID->SetSize(wxSize(64, 13));
    txt3DModelID->SetSize(wxSize(170, -1));

    lbPositionX->SetSize(wxSize(64, 13));
    txtPositionX->SetSize(wxSize(170, -1));
    lbPositionY->SetSize(wxSize(64, 13));
    txtPositionY->SetSize(wxSize(170, -1));
    lbPositionZ->SetSize(wxSize(64, 13));
    txtPositionZ->SetSize(wxSize(170, -1));
    btAdd->SetSize(wxSize(90, -1));
    btCancel->SetSize(wxSize(90, -1));
    // end wxGlade
}


void wx3DModelDialog::do_layout()
{
    // begin wxGlade: wx3DModelDialog::do_layout
    wxGridSizer* sizerLayout = new wxGridSizer(6, 2, 0, 0);
    sizerLayout->Add(lb3DModelType, 0, wxADJUST_MINSIZE, 0);
    sizerLayout->Add(cmbbx3DModelType, 0, wxADJUST_MINSIZE, 0);

    sizerLayout->Add(lb3DModelID, 0, wxADJUST_MINSIZE, 0);
    sizerLayout->Add(txt3DModelID, 0, wxADJUST_MINSIZE, 0);

    sizerLayout->Add(lbPositionX, 0, wxADJUST_MINSIZE, 0);
    sizerLayout->Add(txtPositionX, 0, wxADJUST_MINSIZE, 0);
    sizerLayout->Add(lbPositionY, 0, wxADJUST_MINSIZE, 0);
    sizerLayout->Add(txtPositionY, 0, wxADJUST_MINSIZE, 0);
    sizerLayout->Add(lbPositionZ, 0, wxADJUST_MINSIZE, 0);
    sizerLayout->Add(txtPositionZ, 0, wxADJUST_MINSIZE, 0);
    sizerLayout->Add(btAdd, 0, wxADJUST_MINSIZE, 0);
    sizerLayout->Add(btCancel, 0, wxADJUST_MINSIZE, 0);
    SetAutoLayout(true);
    SetSizer(sizerLayout);
    Layout();
    // end wxGlade
}

wxString wx3DModelDialog::Get3DModelType()
{
  return this->cmbbx3DModelType->GetStringSelection();
}

GzVector wx3DModelDialog::Get3DModelPosition()
{
  string strPositionX = string( this->txtPositionX->GetLineText(0).c_str() );
  string strPositionY = string( this->txtPositionY->GetLineText(0).c_str() );
  string strPositionZ = string( this->txtPositionZ->GetLineText(0).c_str() );

  double dPositionX = Conversion::StringToDouble(strPositionX);
  double dPositionY = Conversion::StringToDouble(strPositionY);
  double dPositionZ = Conversion::StringToDouble(strPositionZ);

  GzVector position;
  position.x = dPositionX;
  position.y = dPositionY;
  position.z = dPositionZ;

  return position;
}
 
wxString wx3DModelDialog::Get3DModelID()
{
  return this->txt3DModelID->GetLineText(0);
}

void wx3DModelDialog::On_BtAdd_Clicked(wxCommandEvent& e)
{
  this->bButtonAddPressed = true;
  this->Close();
}

void wx3DModelDialog::On_BtCancel_Clicked(wxCommandEvent& e)
{
  this->bButtonAddPressed = false;
  this->Close();
}

bool wx3DModelDialog::IsButtonAddPressed()
{
  this->bButtonAddPressed = true;
  return this->bButtonAddPressed;
}






